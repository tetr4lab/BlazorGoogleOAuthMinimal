@using System.Net.Http
@using WeatherCast.Data
@using WeatherCast.Component

@page "/client"
@rendermode InteractiveWebAssembly

@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IWeatherForecastServices ForecastServices
@inject ILoggerFactory LoggerFactory

<PageTitle>ClientHome</PageTitle>

<h1>ClientHome</h1>

<p>
    running on @(OperatingSystem.IsBrowser() ? "browser" : "server").<br />
    rendered on @(System.OperatingSystem.IsLinux() ? "linux" : "not linux").<br />
    rendered on @(System.OperatingSystem.IsWindows() ? "windows" : "not windows").
</p>

<WeatherReport OnStateHasChanged="StateHasChanged" @ref="report" />

@if (report is not null) {
    @* 上のレポートが表示されてから有効化 *@
    <p>
        <button class="btn btn-primary" title="送/受信の結果を表示します。" @onclick="Post">Post</button>
        <WeatherReport Forecast="posted" Forecasts="result" Auto="false" OnStateHasChanged="StateHasChanged" />
        @if (posted is not null) {
            <button class="btn btn-primary" @onclick="@(() => {posted = null; result = null;})">Clear</button>
        }
    </p>
}

@code {
    protected WeatherReport? report;

    protected WeatherForecast? posted;
    protected WeatherForecast []? result;

    protected async Task Post () {
        posted = await WeatherForecast.CreateAsync(0);
        result = await ForecastServices.PostForecastAsync(posted);
        var logger = LoggerFactory.CreateLogger<ClientHome>();
        logger.LogInformation($"ClientHome.Post result={(result is not null && result.Length > 0 ? result[0] : "null")}");
    }

}