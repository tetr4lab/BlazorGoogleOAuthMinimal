@using Microsoft.AspNetCore.Components.Web
@using WeatherCast.Data

@namespace WeatherCast.Component

@inject IWeatherForecastServices ForecastServices

<p role="status">Current count: @currentCount</p>

@if (forecasts == null) {
    <p><em>Loading...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts) {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <p>This component demonstrates showing data.</p>
    <button class="btn btn-primary" @onclick="IncrementCount">Update</button>
}

@code {
    /// <summary>更新を親に伝える</summary>
    [Parameter] public EventCallback OnStateHasChanged { get; set; }

    protected int currentCount = 0;

    protected async Task IncrementCount() {
        System.Diagnostics.Debug.WriteLine($"count {currentCount} => {currentCount + 1}");
        currentCount++;
        await Update();
    }

    protected WeatherForecast[]? forecasts;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) {
            await Update();
        }
    }

    protected async Task Update () {
        forecasts = null;
        forecasts = await ForecastServices.GetForecastsAsync ();
        if (OnStateHasChanged.HasDelegate) {
            await OnStateHasChanged.InvokeAsync ();
        }
        System.Diagnostics.Debug.WriteLine("Weather initialized.");
    }

}
